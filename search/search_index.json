{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to my Kotlin corner! 1 \u00b6 Purpose \u00b6 If you're a first-time visitor, welcome!! I'm glad you're here! The main purpose of this site is to document and share my Kotlin learning journey with the community. I have three goals: Build and evolve my core Kotlin and Android development skills. Design apps for new Foldable devices like the Microsoft Surface Duo . Explore integrations with \"cloud\" platforms like Azure , M365 and Firebase By learning in public I hope to motivate myself to keep going (see #100DaysOfKotlin ) and create a useful resource for others' journeys as well. Onwards! Progress \u00b6 Activity This Week Dec 2 | Website updated with #100DaysOfKotlin . Dec 1 | Jetbrains launched a Kotlin For Java Developers course on Coursera starting today. It's free to audit or you can pay for certification. The course is spread over 5 weeks and should take ~25 hours to complete on a normal pace. I'll be checking it out soon! You can find previous updates here Learn about #100DaysOfKotlin Information \u00b6 Under The Hood The site was built using Mkdocs with the Material theme and reflects my love for all things documentation! . I'm still learning about its amazing features so expect the site to change and evolve as I explore this further! You can even subscribe to an RSS Feed for site updates. Have Feedback? Have comments, questions or recommendations? Three ways to get in touch! Follow @kotlinfyi on Twitter | Tag me there for general discussions. Visit #kotlinfyi on dev.to | Leave comments on specific posts. Submit an issue on GitHub | Send me resource recommendations or edits. Follow @kotlinfyi Banner image credited to undraw.co \u21a9","title":"Welcome"},{"location":"#welcome-to-my-kotlin-corner-1","text":"","title":"Welcome to my Kotlin corner! 1"},{"location":"#purpose","text":"If you're a first-time visitor, welcome!! I'm glad you're here! The main purpose of this site is to document and share my Kotlin learning journey with the community. I have three goals: Build and evolve my core Kotlin and Android development skills. Design apps for new Foldable devices like the Microsoft Surface Duo . Explore integrations with \"cloud\" platforms like Azure , M365 and Firebase By learning in public I hope to motivate myself to keep going (see #100DaysOfKotlin ) and create a useful resource for others' journeys as well. Onwards!","title":"Purpose"},{"location":"#progress","text":"Activity This Week Dec 2 | Website updated with #100DaysOfKotlin . Dec 1 | Jetbrains launched a Kotlin For Java Developers course on Coursera starting today. It's free to audit or you can pay for certification. The course is spread over 5 weeks and should take ~25 hours to complete on a normal pace. I'll be checking it out soon! You can find previous updates here Learn about #100DaysOfKotlin","title":"Progress"},{"location":"#information","text":"Under The Hood The site was built using Mkdocs with the Material theme and reflects my love for all things documentation! . I'm still learning about its amazing features so expect the site to change and evolve as I explore this further! You can even subscribe to an RSS Feed for site updates. Have Feedback? Have comments, questions or recommendations? Three ways to get in touch! Follow @kotlinfyi on Twitter | Tag me there for general discussions. Visit #kotlinfyi on dev.to | Leave comments on specific posts. Submit an issue on GitHub | Send me resource recommendations or edits. Follow @kotlinfyi Banner image credited to undraw.co \u21a9","title":"Information"},{"location":"android/","text":"Hello, Android! \u00b6 Plan \u00b6 Once you've mastered Kotlin core concepts, this is a good entry point to begin exploring Android development in parallel, even as you skill up on advanced Kotlin topics like coroutines. This is because the Android development ecosystem is fairly large and complex - spanning both platform topics (architecture, core concepts, best practices) and device categories (mobile, wearable, TV, automobile, internet-of-things and more). I'm bucketing the Android learnings into three broad learning trails for now. Trail Topic Description 300 Android Core basic concepts & Jetpack Architecture 400 Android Advanced device categories (wearable, TV, Auto, IoT) & best practices 500 Foldable Devices foldable form devices, dual-screen design - now Foldables section) Progress \u00b6 Check back for updates Trail Map","title":"Hello Android!"},{"location":"android/#hello-android","text":"","title":"Hello, Android!"},{"location":"android/#plan","text":"Once you've mastered Kotlin core concepts, this is a good entry point to begin exploring Android development in parallel, even as you skill up on advanced Kotlin topics like coroutines. This is because the Android development ecosystem is fairly large and complex - spanning both platform topics (architecture, core concepts, best practices) and device categories (mobile, wearable, TV, automobile, internet-of-things and more). I'm bucketing the Android learnings into three broad learning trails for now. Trail Topic Description 300 Android Core basic concepts & Jetpack Architecture 400 Android Advanced device categories (wearable, TV, Auto, IoT) & best practices 500 Foldable Devices foldable form devices, dual-screen design - now Foldables section)","title":"Plan"},{"location":"android/#progress","text":"Check back for updates Trail Map","title":"Progress"},{"location":"cloud/","text":"Cloud Integrations For the Kotlin Developer \u00b6 Plan \u00b6 As a Kotlin developer, you might find Android development to be the most mature path even as JetBrains builds support for multi-platform development (web, server-side, data science etc.). And as an Android app developer you will likely need to pair your front-end (app) development with back-end (services and infrastructure) support that can enable, automate, scale and enhance the various user scenarios you require. This is where cloud integrations can help. This section is the starting point to explore various cloud provider services and SDKs, understanding their products, the user scenarios enabled, and the SDKS/libraries available to a Kotlin developer for this purpose. The ecosystem is vast so I created a 600 Cloud trail with four main branches to explore Trail Topic Description 601 Core Concepts Understand fundamental cloud computing concepts, architectures and solutions 602 Microsoft Azure Explore Microsoft Azure services, solutions and SDKS 603 Google Firebase Explore Google Firebase services, solutions and SDKs 604 Kotlin + Server Explore JetBrains' emerging options for server-side development with Kotlin Progress \u00b6 Check back for updates Trail Map","title":"Hello Cloud!"},{"location":"cloud/#cloud-integrations-for-the-kotlin-developer","text":"","title":"Cloud Integrations For the Kotlin Developer"},{"location":"cloud/#plan","text":"As a Kotlin developer, you might find Android development to be the most mature path even as JetBrains builds support for multi-platform development (web, server-side, data science etc.). And as an Android app developer you will likely need to pair your front-end (app) development with back-end (services and infrastructure) support that can enable, automate, scale and enhance the various user scenarios you require. This is where cloud integrations can help. This section is the starting point to explore various cloud provider services and SDKs, understanding their products, the user scenarios enabled, and the SDKS/libraries available to a Kotlin developer for this purpose. The ecosystem is vast so I created a 600 Cloud trail with four main branches to explore Trail Topic Description 601 Core Concepts Understand fundamental cloud computing concepts, architectures and solutions 602 Microsoft Azure Explore Microsoft Azure services, solutions and SDKS 603 Google Firebase Explore Google Firebase services, solutions and SDKs 604 Kotlin + Server Explore JetBrains' emerging options for server-side development with Kotlin","title":"Plan"},{"location":"cloud/#progress","text":"Check back for updates Trail Map","title":"Progress"},{"location":"cloud/azure/","text":"Microsoft Azure \u00b6 About Azure \u00b6 Azure is Microsoft's cloud computing and AI platform, with 200+ services across 20+ categories including: * Machine Learning & AI * Identity It also offers solutions showcasing proven combinations of Azure products and services that tackle popular business or domain-specific challenges. Related Disclosure: I am currently a Senior Cloud Advocate at Microsoft and hope to use this section of the site to explore ways to better support our Android and Kotlin developer ecosystem. Feedback is welcomed! My Twitter DMs are open or you can submit an issue to this site's repo. Documentation \u00b6 Information Azure Documentation | Architecture Center | Solutions Microsoft Azure: Getting Started Microsoft Azure: Mobile Developer Hub Microsoft Azure: Mobile Solutions Microsoft Azure: Learning Paths Microsoft Azure: Certifications Self-Guided Learning \u00b6 There are many learning paths, courses and hands-on workshops you can explore to build up your knowledge and usage of Azure. Here are a few options to start with (click to expand): Azure Basics: Cloud, Data & AI This is a curated collection of 15 learning paths that should take ~27 hours to complete. It provides a comprehensive review of Azure fundamentals, data concepts and machine learning usage - perfect for preparing for the Az-900 Certification Azure Fundamentals 1: Describe Core Azure Concepts Azure Fundamentals 2: Describe core Azure services Azure Fundamentals 3: Describe core solutions and management tools on Azure Azure Fundamentals 4: Describe general security and network security features Azure Fundamentals 5: Describe identity, governance, privacy, and compliance features Azure Fundamentals 6: Describe Azure cost management and service level agreements","title":"Microsoft Azure"},{"location":"cloud/azure/#microsoft-azure","text":"","title":"Microsoft Azure"},{"location":"cloud/azure/#about-azure","text":"Azure is Microsoft's cloud computing and AI platform, with 200+ services across 20+ categories including: * Machine Learning & AI * Identity It also offers solutions showcasing proven combinations of Azure products and services that tackle popular business or domain-specific challenges. Related Disclosure: I am currently a Senior Cloud Advocate at Microsoft and hope to use this section of the site to explore ways to better support our Android and Kotlin developer ecosystem. Feedback is welcomed! My Twitter DMs are open or you can submit an issue to this site's repo.","title":"About Azure"},{"location":"cloud/azure/#documentation","text":"Information Azure Documentation | Architecture Center | Solutions Microsoft Azure: Getting Started Microsoft Azure: Mobile Developer Hub Microsoft Azure: Mobile Solutions Microsoft Azure: Learning Paths Microsoft Azure: Certifications","title":"Documentation"},{"location":"cloud/azure/#self-guided-learning","text":"There are many learning paths, courses and hands-on workshops you can explore to build up your knowledge and usage of Azure. Here are a few options to start with (click to expand): Azure Basics: Cloud, Data & AI This is a curated collection of 15 learning paths that should take ~27 hours to complete. It provides a comprehensive review of Azure fundamentals, data concepts and machine learning usage - perfect for preparing for the Az-900 Certification Azure Fundamentals 1: Describe Core Azure Concepts Azure Fundamentals 2: Describe core Azure services Azure Fundamentals 3: Describe core solutions and management tools on Azure Azure Fundamentals 4: Describe general security and network security features Azure Fundamentals 5: Describe identity, governance, privacy, and compliance features Azure Fundamentals 6: Describe Azure cost management and service level agreements","title":"Self-Guided Learning"},{"location":"foldables/","text":"Hello, Foldables! \u00b6 Plan \u00b6 What are Foldables? The term \"Foldables\" refers here to smartphones that fold, giving rise to mobile devices that effectively have two operating modes based on their state (\"folded\" and \"unfolded\") -- leading to developer challenges in adapting the user experience and interactions to suit both the user intent and device features that are available in the current mode. Currently, you can think of devices embracing one of two approaches: * Fold-in | Clamshell - where a large smartphone can be folded (like a flip-phone)) to make it more compact for portability. * Fold-out | Tablet - where a large smartphone can be expanded into a larger display area for immersive experiences or productivity. Why should Kotlin developers care? Currently, most ( if not all ) foldable devices run on Android. And Kotlin is now the preferred language for Android development - so if you are a Kotlin Android developer, it's a good time to explore the ecosystem. Android 10, added more support for building apps for foldables and devices like the Microsoft Surface Duo are embracing dual screen form factors that can enable new solutions for consumers (immersive experiences) and enterprises (productivity apps). To explore app development with Kotlin, I added a 500 Foldables trail with two main branches: Trail Topic Description 501 Foldable Apps For Android Android SDK support for foldables, design patterns for the general category of foldables 502 Dual Screen Apps for Microsoft Surface Duo Surface Duo SDK usage, design patterns for dual-screen category of foldables Progress \u00b6 Check back for updates Trail Map","title":"Hello Foldables!"},{"location":"foldables/#hello-foldables","text":"","title":"Hello, Foldables!"},{"location":"foldables/#plan","text":"What are Foldables? The term \"Foldables\" refers here to smartphones that fold, giving rise to mobile devices that effectively have two operating modes based on their state (\"folded\" and \"unfolded\") -- leading to developer challenges in adapting the user experience and interactions to suit both the user intent and device features that are available in the current mode. Currently, you can think of devices embracing one of two approaches: * Fold-in | Clamshell - where a large smartphone can be folded (like a flip-phone)) to make it more compact for portability. * Fold-out | Tablet - where a large smartphone can be expanded into a larger display area for immersive experiences or productivity. Why should Kotlin developers care? Currently, most ( if not all ) foldable devices run on Android. And Kotlin is now the preferred language for Android development - so if you are a Kotlin Android developer, it's a good time to explore the ecosystem. Android 10, added more support for building apps for foldables and devices like the Microsoft Surface Duo are embracing dual screen form factors that can enable new solutions for consumers (immersive experiences) and enterprises (productivity apps). To explore app development with Kotlin, I added a 500 Foldables trail with two main branches: Trail Topic Description 501 Foldable Apps For Android Android SDK support for foldables, design patterns for the general category of foldables 502 Dual Screen Apps for Microsoft Surface Duo Surface Duo SDK usage, design patterns for dual-screen category of foldables","title":"Plan"},{"location":"foldables/#progress","text":"Check back for updates Trail Map","title":"Progress"},{"location":"home/100days/","text":"#100DaysOfKotlin \u00b6 Purpose \u00b6 I kickstarted my #100DaysOfKotlin challenge on Dec 1, 2020 with a focus on three objectives: Building core Kotlin and Android development skills. Developing Kotlin + Android apps for Microsoft Surface Duo and other foldables . Exploring Kotlin + Cloud integrations with Microsoft Azure , M365 and Power Platform . Trail Map Progress \u00b6 Follow my progress here. I'll may explore trails out of order but will organize the learnings under topic specific tabs for Kotlin , Android , Foldables and Cloud development. Days 1-10 | Dec 1-9 2020 Dec 1 | Published kotlin.fyi website using mkdocs-material theme. Wrote about my goals for #100DaysOfKotlin and began collecting relevant resources to explore Dec 2 | Created Kotlin , Android , Advanced and Cloud trails with relevant Trail Map sections. Began exploring the Kotlin For Java Developers resources. Loving mkdocs-material for writing/building site! Dec 3 | Dec 4 | Dec 5 | Dec 6 | Dec 7 | Dec 8 | Dec 9 | Dec 10 | Days 11-20 | TBA Process \u00b6 I'll use these visual callouts (colors, icons, labels) to summarize learnings or highlight insights . Motivation Why should we care about this topic? What are the tradeoffs? Concept What are the key terms or features we need to know? What are the architecures or solutions employed? Quickstart or Tutorial Quickstart - validates your basic development setup Tutorial - walks through an end-to-end development scenario with code Best Practices How To - walks through building a specific feature or use case with code Design Patterns - recommends UI/UX/workflow patterns derived from experience Caution: Tradeoffs - understand implications of making this decision (e.g., deprecated API) Anti-Patterns - common approaches that are often ineffective or counterproductive","title":"Activity"},{"location":"home/100days/#100daysofkotlin","text":"","title":" #100DaysOfKotlin"},{"location":"home/100days/#purpose","text":"I kickstarted my #100DaysOfKotlin challenge on Dec 1, 2020 with a focus on three objectives: Building core Kotlin and Android development skills. Developing Kotlin + Android apps for Microsoft Surface Duo and other foldables . Exploring Kotlin + Cloud integrations with Microsoft Azure , M365 and Power Platform . Trail Map","title":"Purpose"},{"location":"home/100days/#progress","text":"Follow my progress here. I'll may explore trails out of order but will organize the learnings under topic specific tabs for Kotlin , Android , Foldables and Cloud development. Days 1-10 | Dec 1-9 2020 Dec 1 | Published kotlin.fyi website using mkdocs-material theme. Wrote about my goals for #100DaysOfKotlin and began collecting relevant resources to explore Dec 2 | Created Kotlin , Android , Advanced and Cloud trails with relevant Trail Map sections. Began exploring the Kotlin For Java Developers resources. Loving mkdocs-material for writing/building site! Dec 3 | Dec 4 | Dec 5 | Dec 6 | Dec 7 | Dec 8 | Dec 9 | Dec 10 | Days 11-20 | TBA","title":"Progress"},{"location":"home/100days/#process","text":"I'll use these visual callouts (colors, icons, labels) to summarize learnings or highlight insights . Motivation Why should we care about this topic? What are the tradeoffs? Concept What are the key terms or features we need to know? What are the architecures or solutions employed? Quickstart or Tutorial Quickstart - validates your basic development setup Tutorial - walks through an end-to-end development scenario with code Best Practices How To - walks through building a specific feature or use case with code Design Patterns - recommends UI/UX/workflow patterns derived from experience Caution: Tradeoffs - understand implications of making this decision (e.g., deprecated API) Anti-Patterns - common approaches that are often ineffective or counterproductive","title":"Process"},{"location":"home/about/","text":"About Kotlin.FYI \u00b6 Learn about #100DaysOfKotlin My Goal \u00b6 It is December 1, 2020 - and I'm embarking on a #100DaysOfKotlin journey. I want to understand the language better and learn to use Kotlin more productively across the broad ecosystem of targets that it currently supports -- starting with Android. By sharing my journey on this site, I hope to do three things: Create a personal resource I can revisit when I need to. Provide a community resource for other learners, particularly beginners. Keep myself accountable by learning in public ! Bonus: I want to get into the practice of writing code and content consistently in the new year. Starting in December is a perfect way to crush that resolution! My motto will be: progress beats perfection - ship things as I go, then come back and clean up or update later as needed. My Motivation \u00b6 I recently started a new role as a mobile developer advocate within Microsoft Developer Relations , working with devices like the Surface Duo and cloud platforms like Azure , M365 and Power Platform . My mission is to help diverse developer audiences understand and use these platforms and technologies more effectively. And part of that process is to go where developers are and become innately familiar with their development environments and language preferences. Simply put, I want to help every mobile developer become more productive with cloud and AI. Why Kotlin? \u00b6 Android developers are a core audience given the ubiquity of Android devices worldwide and the emergence of new foldable devices like the Microsoft Surface Duo . While I've worked with Android in the past (in researcher, developer and faculty contexts), it was as a Java developer - the then-preferred programming language for Android. However in 2019 Google declared Android would be Kotlin First , signaling a deeper committment to Kotlin across their engineering, documentation and training objectives. In 2020, Jetbrains released Kotlin 1.4 with emphasis on expanding the scope for Kotlin usage to include server-side, native, web, and even data science, targets. Github ranked it #5 in fastest-growing languages, while Stack Overflow ranked it #13 in most popular languages for professional developers. In other words, this is a great time to learn Kotlin and join the community! What is #100DaysOfKotlin? \u00b6 This was inspired by the 100DaysOfCode challenge where you commit to working on a coding initiative every day for 100 days, leading to ingrained and consistent habits that improve your comprehension, retention and recall. I'm adopting a more flexible approach where I will: create an evolving roadmap of things I want to learn. document progress on the #100DaysOfCode page share updates on @kotlinfyi Follow @kotlinfyi","title":"About"},{"location":"home/about/#about-kotlinfyi","text":"Learn about #100DaysOfKotlin","title":"About Kotlin.FYI"},{"location":"home/about/#my-goal","text":"It is December 1, 2020 - and I'm embarking on a #100DaysOfKotlin journey. I want to understand the language better and learn to use Kotlin more productively across the broad ecosystem of targets that it currently supports -- starting with Android. By sharing my journey on this site, I hope to do three things: Create a personal resource I can revisit when I need to. Provide a community resource for other learners, particularly beginners. Keep myself accountable by learning in public ! Bonus: I want to get into the practice of writing code and content consistently in the new year. Starting in December is a perfect way to crush that resolution! My motto will be: progress beats perfection - ship things as I go, then come back and clean up or update later as needed.","title":"My Goal"},{"location":"home/about/#my-motivation","text":"I recently started a new role as a mobile developer advocate within Microsoft Developer Relations , working with devices like the Surface Duo and cloud platforms like Azure , M365 and Power Platform . My mission is to help diverse developer audiences understand and use these platforms and technologies more effectively. And part of that process is to go where developers are and become innately familiar with their development environments and language preferences. Simply put, I want to help every mobile developer become more productive with cloud and AI.","title":"My Motivation"},{"location":"home/about/#why-kotlin","text":"Android developers are a core audience given the ubiquity of Android devices worldwide and the emergence of new foldable devices like the Microsoft Surface Duo . While I've worked with Android in the past (in researcher, developer and faculty contexts), it was as a Java developer - the then-preferred programming language for Android. However in 2019 Google declared Android would be Kotlin First , signaling a deeper committment to Kotlin across their engineering, documentation and training objectives. In 2020, Jetbrains released Kotlin 1.4 with emphasis on expanding the scope for Kotlin usage to include server-side, native, web, and even data science, targets. Github ranked it #5 in fastest-growing languages, while Stack Overflow ranked it #13 in most popular languages for professional developers. In other words, this is a great time to learn Kotlin and join the community!","title":"Why Kotlin?"},{"location":"home/about/#what-is-100daysofkotlin","text":"This was inspired by the 100DaysOfCode challenge where you commit to working on a coding initiative every day for 100 days, leading to ingrained and consistent habits that improve your comprehension, retention and recall. I'm adopting a more flexible approach where I will: create an evolving roadmap of things I want to learn. document progress on the #100DaysOfCode page share updates on @kotlinfyi Follow @kotlinfyi","title":"What is #100DaysOfKotlin?"},{"location":"home/roadmap/","text":"Happy Trails! \u00b6 Learn about #100DaysOfKotlin I picked learning resources to explore based on 2 criteria: Relevance | resources created by Jetbrains (Kotlin maintainer), Google (Android maintainer) or community authors offering unique perspectives. Recency | resources created within the past 12 months, ensuring they are compliant with latest releases (Kotlin 1.4.x, Android 11) and best practices. Questions or Comments? Feedback is welcome - please do submit an issue if you have recommendations for other resources or comments on the roadmap or listed options! 000 | Resources \u00b6 001 | Books Atomic Kotlin - Bruce Eckel, Svetlana Isakova (Sep 2020) | Learner Guide Kotlin Cookbook - Ken Kousen, O'Reilly (Nov 2019) Recommended Books - Jetbrains/Kotlin list 100 | Kotlin Core \u00b6 101 | Concept Sprints \u00b6 101.1 | Kotlin By Example These provide quick hands-on experience with code snippets that teach you various concepts and features. It's also a good way to explore the Kotlin Playground browser-based runtime that can help solidify concepts by letting you try out different ideas that help answer questions you might have about syntax. Introduction Control Flow Special Classes Functional Collections Scope Functions Delegation Productivity Boosters Kotlin/JS 101.2 | Kotlin Koans Koans help you test & improve your understanding of idiomatic and syntactical Kotlin by fixing bugs in code till tests pass. It's also a good way to explore their built-in courses available by installing EduTools plugin into your default IDE (Android Studio or Intellij IDEA). The bonus: you can try out the Atomic Kotlin course next! Introduction Conventions Collections Properties Builders Generics 102 | Complete Courses \u00b6 102.1 | Kotlin For Java Developers This is a good place to start if you have a resonable background in Java and prefer to learn what you need to get productive migrating existing Java code! A 5-week Coursera course from Jetbrains taught by Andre Breslav (Kotlin creator), Svetalana Isakova (Jetbrains Developer Advocate). 1.2.1 | Introduction 1.2.2 | Starting up with Kotlin 1.2.3 | Nullability & Functional Programming 1.2.4 | Properties, OOP, Conventions 1.2.5 | Sequences, Lambdas with Receiver, Types 102.2 | Kotlin For Android Java Developers A 4-part Kotlin For Android Java Developers guide from Android Developers - with two codelabs you can complete in Android Studio. 1 | Converting to Kotlin - codelab, Jul 2020 2 | Add Kotlin to an existing app - using Android Studio 3 | Calling Kotlin Code from Java - codelab, May 2020 4 | Kotlin-Java interop guide - set of rules for authoring public APIs 200 | Kotlin Advanced \u00b6 201 | Kotlin Coroutines \u00b6 202 | Kotlin Multiplatform \u00b6 300 | Android Core \u00b6 301 | Basic Concepts \u00b6 302 | Jetpack Architecture \u00b6 400 | Android Advanced \u00b6 301 | Device Solutions \u00b6 302 | E2E Best Practices \u00b6 500 | Foldable Devices \u00b6 501 | Foldable Android Apps \u00b6 502 | Microsoft Surface Duo \u00b6 600 | Kotlin Cloud \u00b6 601 | Core Concepts \u00b6 602 | Microsoft Azure \u00b6 603 | Firebase \u00b6 604 | Kotlin Server-Side \u00b6 700 | Cross-Cutting \u00b6 701 | Machine Learning \u00b6 702 | Accessibility \u00b6 703 | Design \u00b6 Follow Me @kotlinfyi","title":"Trail Map"},{"location":"home/roadmap/#happy-trails","text":"Learn about #100DaysOfKotlin I picked learning resources to explore based on 2 criteria: Relevance | resources created by Jetbrains (Kotlin maintainer), Google (Android maintainer) or community authors offering unique perspectives. Recency | resources created within the past 12 months, ensuring they are compliant with latest releases (Kotlin 1.4.x, Android 11) and best practices. Questions or Comments? Feedback is welcome - please do submit an issue if you have recommendations for other resources or comments on the roadmap or listed options!","title":" Happy Trails!"},{"location":"home/roadmap/#000-resources","text":"001 | Books Atomic Kotlin - Bruce Eckel, Svetlana Isakova (Sep 2020) | Learner Guide Kotlin Cookbook - Ken Kousen, O'Reilly (Nov 2019) Recommended Books - Jetbrains/Kotlin list","title":"000 | Resources"},{"location":"home/roadmap/#100-kotlin-core","text":"","title":"100 | Kotlin Core"},{"location":"home/roadmap/#101-concept-sprints","text":"101.1 | Kotlin By Example These provide quick hands-on experience with code snippets that teach you various concepts and features. It's also a good way to explore the Kotlin Playground browser-based runtime that can help solidify concepts by letting you try out different ideas that help answer questions you might have about syntax. Introduction Control Flow Special Classes Functional Collections Scope Functions Delegation Productivity Boosters Kotlin/JS 101.2 | Kotlin Koans Koans help you test & improve your understanding of idiomatic and syntactical Kotlin by fixing bugs in code till tests pass. It's also a good way to explore their built-in courses available by installing EduTools plugin into your default IDE (Android Studio or Intellij IDEA). The bonus: you can try out the Atomic Kotlin course next! Introduction Conventions Collections Properties Builders Generics","title":"101 | Concept Sprints"},{"location":"home/roadmap/#102-complete-courses","text":"102.1 | Kotlin For Java Developers This is a good place to start if you have a resonable background in Java and prefer to learn what you need to get productive migrating existing Java code! A 5-week Coursera course from Jetbrains taught by Andre Breslav (Kotlin creator), Svetalana Isakova (Jetbrains Developer Advocate). 1.2.1 | Introduction 1.2.2 | Starting up with Kotlin 1.2.3 | Nullability & Functional Programming 1.2.4 | Properties, OOP, Conventions 1.2.5 | Sequences, Lambdas with Receiver, Types 102.2 | Kotlin For Android Java Developers A 4-part Kotlin For Android Java Developers guide from Android Developers - with two codelabs you can complete in Android Studio. 1 | Converting to Kotlin - codelab, Jul 2020 2 | Add Kotlin to an existing app - using Android Studio 3 | Calling Kotlin Code from Java - codelab, May 2020 4 | Kotlin-Java interop guide - set of rules for authoring public APIs","title":"102 | Complete Courses"},{"location":"home/roadmap/#200-kotlin-advanced","text":"","title":"200 | Kotlin Advanced"},{"location":"home/roadmap/#201-kotlin-coroutines","text":"","title":"201 | Kotlin Coroutines"},{"location":"home/roadmap/#202-kotlin-multiplatform","text":"","title":"202 | Kotlin Multiplatform"},{"location":"home/roadmap/#300-android-core","text":"","title":"300 | Android Core"},{"location":"home/roadmap/#301-basic-concepts","text":"","title":"301 | Basic Concepts"},{"location":"home/roadmap/#302-jetpack-architecture","text":"","title":"302 | Jetpack Architecture"},{"location":"home/roadmap/#400-android-advanced","text":"","title":"400 | Android Advanced"},{"location":"home/roadmap/#301-device-solutions","text":"","title":"301 | Device Solutions"},{"location":"home/roadmap/#302-e2e-best-practices","text":"","title":"302 | E2E Best Practices"},{"location":"home/roadmap/#500-foldable-devices","text":"","title":"500 | Foldable Devices"},{"location":"home/roadmap/#501-foldable-android-apps","text":"","title":"501 | Foldable Android Apps"},{"location":"home/roadmap/#502-microsoft-surface-duo","text":"","title":"502 | Microsoft Surface Duo"},{"location":"home/roadmap/#600-kotlin-cloud","text":"","title":"600 | Kotlin Cloud"},{"location":"home/roadmap/#601-core-concepts","text":"","title":"601 | Core Concepts"},{"location":"home/roadmap/#602-microsoft-azure","text":"","title":"602 | Microsoft Azure"},{"location":"home/roadmap/#603-firebase","text":"","title":"603 | Firebase"},{"location":"home/roadmap/#604-kotlin-server-side","text":"","title":"604 | Kotlin Server-Side"},{"location":"home/roadmap/#700-cross-cutting","text":"","title":"700 | Cross-Cutting"},{"location":"home/roadmap/#701-machine-learning","text":"","title":"701 | Machine Learning"},{"location":"home/roadmap/#702-accessibility","text":"","title":"702 | Accessibility"},{"location":"home/roadmap/#703-design","text":"Follow Me @kotlinfyi","title":"703 | Design"},{"location":"kotlin/","text":"Hello, Kotlin! \u00b6 Plan \u00b6 This is the starting point for any Kotlin learning journey and ideally follows the guidance laid out in the Kotlin documentation . For now, I have two main trails I hope to build: Trail Topic Description 100 Kotlin Core Basic syntax, classes & objects, functions & lambdas, and collections. Ideal for beginners 200 Kotlin Advanced Coroutines and multiplatform programming. Mobile, web, native, data science and server-side development solutions. Progress \u00b6 Check back for updates Trail Map","title":"Hello Kotlin!"},{"location":"kotlin/#hello-kotlin","text":"","title":"Hello, Kotlin!"},{"location":"kotlin/#plan","text":"This is the starting point for any Kotlin learning journey and ideally follows the guidance laid out in the Kotlin documentation . For now, I have two main trails I hope to build: Trail Topic Description 100 Kotlin Core Basic syntax, classes & objects, functions & lambdas, and collections. Ideal for beginners 200 Kotlin Advanced Coroutines and multiplatform programming. Mobile, web, native, data science and server-side development solutions.","title":"Plan"},{"location":"kotlin/#progress","text":"Check back for updates Trail Map","title":"Progress"}]}