{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Hello Kotlinverse! \u00b6 My name is Nitya Narasimhan . I'm a Mobile / Cloud Advocate on the Developer Relations team at Microsoft and I want to help you build beautiful experiences for mobile users - at cloud scale. Learn more about me and my motivations for this site here . #CloudSkills - Concepts to Certification This site is for anyone taking a Kotlin learning journey, with three trails initially: Core Kotlin | focus on language syntax and foundational concepts. Kotlin + Android | building professional mobile apps using best practices. Kotlin + Cloud | scaling mobile apps with cloud services for scale. #100DaysOfKotlin - Basics to Multiplatform Have Comments or Feedback? Here are the main options: Comments | Share them on our Discussions board. Errors? | File an Issue and I will look into it! Kudos! | Please do tag @kotlinfyi and let us know what you liked! Under The Hood: MkDocs-Material The site was intentionally built with Mkdocs and the Material theme to mimic documentation guides. I hope it serves as a living Kotlin Study Guide linking to both canonical and community-created resources of value.","title":"Welcome"},{"location":"#hello-kotlinverse","text":"My name is Nitya Narasimhan . I'm a Mobile / Cloud Advocate on the Developer Relations team at Microsoft and I want to help you build beautiful experiences for mobile users - at cloud scale. Learn more about me and my motivations for this site here . #CloudSkills - Concepts to Certification This site is for anyone taking a Kotlin learning journey, with three trails initially: Core Kotlin | focus on language syntax and foundational concepts. Kotlin + Android | building professional mobile apps using best practices. Kotlin + Cloud | scaling mobile apps with cloud services for scale. #100DaysOfKotlin - Basics to Multiplatform Have Comments or Feedback? Here are the main options: Comments | Share them on our Discussions board. Errors? | File an Issue and I will look into it! Kudos! | Please do tag @kotlinfyi and let us know what you liked! Under The Hood: MkDocs-Material The site was intentionally built with Mkdocs and the Material theme to mimic documentation guides. I hope it serves as a living Kotlin Study Guide linking to both canonical and community-created resources of value.","title":"Hello Kotlinverse!"},{"location":"glossary/","text":"Glossary \u00b6 This page defines abbreviations and frequently used terms in Kotlin. Sections will be added alphabetically to collect terms beginning with that letter. Abbreviations Hover over the abbreviation to see it's expanded definition - this can be done anywhere on this site. KMM","title":"Welcome"},{"location":"glossary/#glossary","text":"This page defines abbreviations and frequently used terms in Kotlin. Sections will be added alphabetically to collect terms beginning with that letter. Abbreviations Hover over the abbreviation to see it's expanded definition - this can be done anywhere on this site. KMM","title":"Glossary"},{"location":"100days/","text":"My #100DaysOfKotlin Challenge \u00b6 This is inspired by the 100DaysOfCode challenge where you commit to working on a coding initiative every day for 100 days, leading to ingrained and consistent habits that improve your comprehension, retention and recall. I kickstarted this in Dec 2020 and hope to make more progress over the holidays to establish a good routine for progress. Keep an eye on these three resources: Roadmap a guide to topics or resources I want to explore. Journal a journal, recording progress as it happens. @kotlinfyi a social account, to share resources & amplify community. #100DaysOfKotlin - Basics to Multiplatform","title":"Welcome"},{"location":"100days/#my-100daysofkotlin-challenge","text":"This is inspired by the 100DaysOfCode challenge where you commit to working on a coding initiative every day for 100 days, leading to ingrained and consistent habits that improve your comprehension, retention and recall. I kickstarted this in Dec 2020 and hope to make more progress over the holidays to establish a good routine for progress. Keep an eye on these three resources: Roadmap a guide to topics or resources I want to explore. Journal a journal, recording progress as it happens. @kotlinfyi a social account, to share resources & amplify community. #100DaysOfKotlin - Basics to Multiplatform","title":"My #100DaysOfKotlin Challenge"},{"location":"100days/about/","text":"This is inspired by the 100DaysOfCode challenge where you commit to working on a coding initiative every day for 100 days, leading to ingrained and consistent habits that improve your comprehension, retention and recall. I kickstarted this in Dec 2020 and hope to make more progress over the holidays to establish a good routine for progress. Keep an eye on these three resources: Roadmap a guide to topics or resources I want to explore. Journal a journal, recording progress as it happens. @kotlinfyi a social account, to share resources & amplify community. #100DaysOfKotlin - Basics to Multiplatform","title":"About"},{"location":"100days/journal/","text":"Learning Journal \u00b6 Till I establish a routine and cadence, I am going to treat \"day\" as a time period and not a calendr. Work done reflects a 24-hour period but adjacent journal days may not reflect sequential calendar days. I might also hop around the roadmap a bit, exploring whatever catches my interest or is a priority for a given project, at that time. #100Days - Week 1 #100Days - Day 001 Dec 10: Goals Revamped roadmap - simplified structure Setup, explore Kotlin development environments Build first Kotlin \"app\" to validate setups Explore Kotlin \"koans\" with integrated IDEA course Today I learned: To do. #100Days - Day 002 #100Days - Day 003 #100Days - Day 004 #100Days - Day 005 #100Days - Day 006","title":"Journal"},{"location":"100days/journal/#learning-journal","text":"Till I establish a routine and cadence, I am going to treat \"day\" as a time period and not a calendr. Work done reflects a 24-hour period but adjacent journal days may not reflect sequential calendar days. I might also hop around the roadmap a bit, exploring whatever catches my interest or is a priority for a given project, at that time. #100Days - Week 1 #100Days - Day 001 Dec 10: Goals Revamped roadmap - simplified structure Setup, explore Kotlin development environments Build first Kotlin \"app\" to validate setups Explore Kotlin \"koans\" with integrated IDEA course Today I learned: To do. #100Days - Day 002 #100Days - Day 003 #100Days - Day 004 #100Days - Day 005 #100Days - Day 006","title":"Learning Journal"},{"location":"100days/roadmap/","text":"Let's Go Adventuring! \u00b6 The current sitemap is structured to provide hierarchical navigation (Levels 100-400) with a basic roadmap laid out in terms of topics that can be covered with the canonical resources identified. Grayed sections provide broad roadmap focus but will get elevated to a numbered section with details as I progress through #100Days Join my #100DaysOfKotlin learning adventure! 100: Kotlin Core \u00b6 Canonical Resources Kotlin Docs - JetBrains/Kotlin Kotlin Education - JetBrains/Kotlin Kotlin Playground - JetBrains/Kotlin Jumpstart Kotlin development as a code newbie: 101 | Getting Started (Setup) 102 | Kotlin Basics 103 | Kotlin Classes & Objects 103 | Kotlin Functions & Lambdas 103 | Kotlin Collections 103 | Kotlin Coroutines 200: Kotlin + Android \u00b6 Canonical Resources SITE: ANDROID DEVELOPERS Develop Android Apps With Kotlin Kotlin Style Guide Kotlin First: Basic Guides Kotlin First: Advanced Guides Kotlin First: For Android Java Developers Android Training: Various Pathways Embrace the Kotlin First approach as an Android newbie. 201 | Getting Started (Setup) 202 | Android Kotlin Fundamentals 203 | Advanced Android In Kotlin 204 | Android Jetpack 204 | Foldable Devices 300: Kotlin + Cloud \u00b6 Cloud+AI integration options for the Kotlin developer. 300 | Azure Fundamentals 400: Kotlin For \"X\" \u00b6 Migrating to Kotlin with prior development or domain expertise: 401 | Kotlin For Java Devs 402 | Kotlin For JavaScript Devs 403 | Kotlin For Data Scientists 500: Courses & Certifications \u00b6 501 | Kotlin For Java Developers - Coursera/JetBrains 502 | Android Kotlin Developer Nanodegree - Udacity/Google 503 | Associate Android Developer - Google Developers 504 | Azure Fundamentals Certification - Microsoft","title":"Roadmap"},{"location":"100days/roadmap/#lets-go-adventuring","text":"The current sitemap is structured to provide hierarchical navigation (Levels 100-400) with a basic roadmap laid out in terms of topics that can be covered with the canonical resources identified. Grayed sections provide broad roadmap focus but will get elevated to a numbered section with details as I progress through #100Days Join my #100DaysOfKotlin learning adventure!","title":" Let's Go Adventuring!"},{"location":"100days/roadmap/#100-kotlin-core","text":"Canonical Resources Kotlin Docs - JetBrains/Kotlin Kotlin Education - JetBrains/Kotlin Kotlin Playground - JetBrains/Kotlin Jumpstart Kotlin development as a code newbie: 101 | Getting Started (Setup) 102 | Kotlin Basics 103 | Kotlin Classes & Objects 103 | Kotlin Functions & Lambdas 103 | Kotlin Collections 103 | Kotlin Coroutines","title":"100: Kotlin Core"},{"location":"100days/roadmap/#200-kotlin-android","text":"Canonical Resources SITE: ANDROID DEVELOPERS Develop Android Apps With Kotlin Kotlin Style Guide Kotlin First: Basic Guides Kotlin First: Advanced Guides Kotlin First: For Android Java Developers Android Training: Various Pathways Embrace the Kotlin First approach as an Android newbie. 201 | Getting Started (Setup) 202 | Android Kotlin Fundamentals 203 | Advanced Android In Kotlin 204 | Android Jetpack 204 | Foldable Devices","title":"200: Kotlin + Android"},{"location":"100days/roadmap/#300-kotlin-cloud","text":"Cloud+AI integration options for the Kotlin developer. 300 | Azure Fundamentals","title":"300: Kotlin + Cloud"},{"location":"100days/roadmap/#400-kotlin-for-x","text":"Migrating to Kotlin with prior development or domain expertise: 401 | Kotlin For Java Devs 402 | Kotlin For JavaScript Devs 403 | Kotlin For Data Scientists","title":"400: Kotlin For \"X\""},{"location":"100days/roadmap/#500-courses-certifications","text":"501 | Kotlin For Java Developers - Coursera/JetBrains 502 | Android Kotlin Developer Nanodegree - Udacity/Google 503 | Associate Android Developer - Google Developers 504 | Azure Fundamentals Certification - Microsoft","title":"500: Courses &amp; Certifications"},{"location":"home/100days/","text":"#100DaysOfKotlin \u00b6","title":":fontawesome-solid-map-signs:{: .heartbeat } #100DaysOfKotlin"},{"location":"home/100days/#100daysofkotlin","text":"","title":" #100DaysOfKotlin"},{"location":"home/about/","text":"#100DaysOfKotlin - Basics to Multiplatform Under The Hood: MkDocs-Material The site was intentionally built with Mkdocs and the Material theme to mimic documentation guides. I hope it serves as a living Kotlin Study Guide linking to both canonical and community-created resources of value. Have Comments or Feedback? Here are the main options: Comments | Share them on our Discussions board. Errors? | File an Issue and I will look into it! Kudos! | Please do tag @kotlinfyi and let us know what you liked! About Me \u00b6 My name is Nitya Narasimhan and welcome to Kotlin.FYI - my visual learning guide for Kotlin! I earned a PhD in computer engineering exploring survivability for distributed Java systems. I spent the next decade working at Motorola Labs as a researcher, working on next-generation mobile devices and ubiquitous computing ideas. And the next few years as a mobile (and web) developer exploring native development with Android (Java) and cross-platform development with Flutter (Dart) and React Native (JavaScript). I took a break from active mobile development in 2018, joining Microsoft Developer Relations to focus on build developer programs and content as the North America lead. But in 2020, Microsoft released the Surface Duo and I just had to dive back into Android development!! About KotlinFYI \u00b6 The ecosystem has evolved in the past 2 years. In 2019, Android went Kotlin first , and signaled their committment to Kotlin going forward. In 2020, JetBrains released Kotlin 1.4 , unveiling plans (with early previews) to extend Kotlin's reach to multiplatform solutions including mobile, server-side, native, web and data science. The This is the perfect time to skill up on Kotlin . But learning a new language thoroughly requires a roadmap and resources. And that is exactly what I hope this site becomes - for me, and for the community! By sharing my learning journey - what I learned, when, and why - and organizing it into a documentation-like system (thanks mkdocs !), I hope I can provide a living resource for other learners! Follow @kotlinfyi 100DaysOfKotlin \u00b6 This is inspired by the 100DaysOfCode challenge where you commit to working on a coding initiative every day for 100 days, leading to ingrained and consistent habits that improve your comprehension, retention and recall. I kickstarted this in Dec 2020 and hope to make more progress over the holidays to establish a good routine for progress. Keep an eye on these three resources: Roadmap a guide to topics or resources I want to explore. Journal a journal, recording progress as it happens. @kotlinfyi a social account, to share resources & amplify community. #100DaysOfKotlin - Basics to Multiplatform","title":"Welcome"},{"location":"home/about/#about-me","text":"My name is Nitya Narasimhan and welcome to Kotlin.FYI - my visual learning guide for Kotlin! I earned a PhD in computer engineering exploring survivability for distributed Java systems. I spent the next decade working at Motorola Labs as a researcher, working on next-generation mobile devices and ubiquitous computing ideas. And the next few years as a mobile (and web) developer exploring native development with Android (Java) and cross-platform development with Flutter (Dart) and React Native (JavaScript). I took a break from active mobile development in 2018, joining Microsoft Developer Relations to focus on build developer programs and content as the North America lead. But in 2020, Microsoft released the Surface Duo and I just had to dive back into Android development!!","title":"About Me"},{"location":"home/about/#about-kotlinfyi","text":"The ecosystem has evolved in the past 2 years. In 2019, Android went Kotlin first , and signaled their committment to Kotlin going forward. In 2020, JetBrains released Kotlin 1.4 , unveiling plans (with early previews) to extend Kotlin's reach to multiplatform solutions including mobile, server-side, native, web and data science. The This is the perfect time to skill up on Kotlin . But learning a new language thoroughly requires a roadmap and resources. And that is exactly what I hope this site becomes - for me, and for the community! By sharing my learning journey - what I learned, when, and why - and organizing it into a documentation-like system (thanks mkdocs !), I hope I can provide a living resource for other learners! Follow @kotlinfyi","title":"About KotlinFYI"},{"location":"home/about/#100daysofkotlin","text":"This is inspired by the 100DaysOfCode challenge where you commit to working on a coding initiative every day for 100 days, leading to ingrained and consistent habits that improve your comprehension, retention and recall. I kickstarted this in Dec 2020 and hope to make more progress over the holidays to establish a good routine for progress. Keep an eye on these three resources: Roadmap a guide to topics or resources I want to explore. Journal a journal, recording progress as it happens. @kotlinfyi a social account, to share resources & amplify community. #100DaysOfKotlin - Basics to Multiplatform","title":"100DaysOfKotlin"},{"location":"includes/abbrev/","text":"","title":"Abbrev"},{"location":"parking-lot/android/","text":"Hello, Android! \u00b6 Plan \u00b6 Once you've mastered Kotlin core concepts, this is a good entry point to begin exploring Android development in parallel. I'll start with three top-level trails. Trail Topic Description 300 Android Core basic concepts & Jetpack Architecture 400 Android Advanced device categories (wearable, TV, Auto, IoT) & best practices 500 Foldable Devices foldable form devices, dual-screen design - now Foldables section) Progress \u00b6 Check back for updates Trail Map","title":"Hello, Android!"},{"location":"parking-lot/android/#hello-android","text":"","title":"Hello, Android!"},{"location":"parking-lot/android/#plan","text":"Once you've mastered Kotlin core concepts, this is a good entry point to begin exploring Android development in parallel. I'll start with three top-level trails. Trail Topic Description 300 Android Core basic concepts & Jetpack Architecture 400 Android Advanced device categories (wearable, TV, Auto, IoT) & best practices 500 Foldable Devices foldable form devices, dual-screen design - now Foldables section)","title":"Plan"},{"location":"parking-lot/android/#progress","text":"Check back for updates Trail Map","title":"Progress"},{"location":"parking-lot/cloud/","text":"Cloud Integrations For the Kotlin Developer \u00b6 Plan \u00b6 As a Kotlin developer, you might find Android development to be the most mature path even as JetBrains builds support for multi-platform development (web, server-side, data science etc.). And as an Android app developer you will likely need to pair your front-end (app) development with back-end (services and infrastructure) support that can enable, automate, scale and enhance the various user scenarios you require. This is where cloud integrations can help. This section is the starting point to explore various cloud provider services and SDKs, understanding their products, the user scenarios enabled, and the SDKS/libraries available to a Kotlin developer for this purpose. The ecosystem is vast so I created a 600 Cloud trail with four main branches to explore Trail Topic Description 601 Core Concepts Understand fundamental cloud computing concepts, architectures and solutions 602 Microsoft Azure Explore Microsoft Azure services, solutions and SDKS 603 Google Firebase Explore Google Firebase services, solutions and SDKs 604 Kotlin + Server Explore JetBrains' emerging options for server-side development with Kotlin Progress \u00b6 Check back for updates Trail Map","title":"Cloud Integrations For the Kotlin Developer"},{"location":"parking-lot/cloud/#cloud-integrations-for-the-kotlin-developer","text":"","title":"Cloud Integrations For the Kotlin Developer"},{"location":"parking-lot/cloud/#plan","text":"As a Kotlin developer, you might find Android development to be the most mature path even as JetBrains builds support for multi-platform development (web, server-side, data science etc.). And as an Android app developer you will likely need to pair your front-end (app) development with back-end (services and infrastructure) support that can enable, automate, scale and enhance the various user scenarios you require. This is where cloud integrations can help. This section is the starting point to explore various cloud provider services and SDKs, understanding their products, the user scenarios enabled, and the SDKS/libraries available to a Kotlin developer for this purpose. The ecosystem is vast so I created a 600 Cloud trail with four main branches to explore Trail Topic Description 601 Core Concepts Understand fundamental cloud computing concepts, architectures and solutions 602 Microsoft Azure Explore Microsoft Azure services, solutions and SDKS 603 Google Firebase Explore Google Firebase services, solutions and SDKs 604 Kotlin + Server Explore JetBrains' emerging options for server-side development with Kotlin","title":"Plan"},{"location":"parking-lot/cloud/#progress","text":"Check back for updates Trail Map","title":"Progress"},{"location":"parking-lot/cloud/azure/","text":"Hello Azure! \u00b6 Welcome to the \"Azure For Kotlin Developers\" section of this site! The objective here is to go from understanding broad cloud computing concepts to actively integrating them using an existing cloud provider - namely Microsoft Azure. Hands-On Learning At the end of this 602 Azure trail we will know the following: Introduction | What is Azure? Architecture | How do we architect mobile-relevant solutions on Azure? Services | What are the mobile-relevant services and what features do they provide? Setup: Account | How do we setup an Azure account? Setup: Tooling | How do we setup and use: Azure Portal, Azure CLI, IDE Setup: SDK | How to setup & validate development environment using an Azure SDK Quickstart: Services | How to invoke an Azure service (multiple options) using the SDK Tutorial: Basic | Design and build a simple mobile solution (architecture, multiple services) Disclosure I'm a Senior Cloud Advocate on the Developer Relations team at Microsoft. I'll use this section to explore Azure support for Kotlin/Android development. Feedback always welcome! I'm maintaining this page in the style of an FAQ. Expand each section for details. Welcome to the Azure section of the Cloud integrations trail. Azure Overview \u00b6 Introduction: What is Azure? Azure is Microsoft's cloud computing and AI platform. It has 200+ products or services spanning 22 categories - including AI+Machine Learning , Compute , Databases , Mobile , Security , Web , Storage and more. A category contains multiple products, and a product can belong to multiple categories. Website | Architecture & Solutions Docs | Services & Categories I've identified a subset of services that are likely to be of initial interest to a mobile or web Kotlin developer - and will explore concepts and usage in more detail in th subsections identified in the navigation menu (to left) Architectures: How do we architect mobile-relevant solutions on Azure A well-architected Azure solution has five pillars: cost optimization, operational excellence, performance efficiency, reliability, and security . This Learning Path teaches you how to build such a solution with Azure. From a technology area standpoint, architectures are about the components (integrations) and data workflows (interactions) required to implement common app scenarios or workloads on Azure. The Azure Architecture Center has a rich collection of best practices and patterns for building diverse applications - for different technology areas (or categories) - on Azure. The [Build great solutions with the Microsoft Azure well-architected framework] learning path gives a comprehensive overview of the five pillars of a well-architected Azure solution: For example: Docs | Azure Solutions Docs | Azure Solutions: Mobile Solution | Build a Task-Based Consumer Mobile App Solution | Build a Social App for Mobile/Web, with Authentication _Check out the subset of scenarios defined for the mobile category . Solutions: Where can I use Azure? Solutions describe proven combinations of Azure products and services used to tackle business problems. For example the Task-Based Consumer Mobile App solution describes the architecture, service components and data flows required to: support authentication with multiple social identity providers store (app) data and sync it later - for offline access send push notifications - for real-time alerts SDKs: What are my programming options for Azure? Azure supports a number of Languages and Tools out of the box including Java , JavaScript , .NET , Python and Go -- but not yet for Kotlin. View the latest SDK releases to see the status of product-specific support in that language. As a Kotlin developer, it's worth looking at two different releases: Azure SDK for Java - comprehensive coverage, can be used with Android API 26+ or desugared to API 21 Azure SDK for Android - limited coverage and also in Java, but tailored for Android workflows (API 21+). Given that the SDKs use Java, it's worth reviewing the Kotlin For Android Java developers guidance or taking a related course to figure out how to use existing Java code from your Kotlin app, or migrate the existing Java samples to Kotlin for consistency. Azure Services \u00b6 I use the terms Services and Products interchangeably in this context. Azure Quickstart \u00b6 Learning Resources \u00b6 MSDocs: 8 Sites To Bookmark Azure Documentation Azure Architecture Center | Solutions Getting Started with Azure Mobile Developers Hub | Solutions Microsoft Learn | Certifications MSLearn: 15 Learning Paths To Complete Complete this curated collection of 15 learning paths (~27 hours). It provides a comprehensive review of Azure fundamentals, data concepts and machine learning usage - also perfect prep for the AZ-900 Certification exam. Azure Fundamentals | modules | modules | modules | modules | modules | modules Azure Data Fundamentals | modules | modules | modules | modules Azure AI/ML Fundamentals | modules | modules | modules | modules | modules","title":"Hello Azure!"},{"location":"parking-lot/cloud/azure/#hello-azure","text":"Welcome to the \"Azure For Kotlin Developers\" section of this site! The objective here is to go from understanding broad cloud computing concepts to actively integrating them using an existing cloud provider - namely Microsoft Azure. Hands-On Learning At the end of this 602 Azure trail we will know the following: Introduction | What is Azure? Architecture | How do we architect mobile-relevant solutions on Azure? Services | What are the mobile-relevant services and what features do they provide? Setup: Account | How do we setup an Azure account? Setup: Tooling | How do we setup and use: Azure Portal, Azure CLI, IDE Setup: SDK | How to setup & validate development environment using an Azure SDK Quickstart: Services | How to invoke an Azure service (multiple options) using the SDK Tutorial: Basic | Design and build a simple mobile solution (architecture, multiple services) Disclosure I'm a Senior Cloud Advocate on the Developer Relations team at Microsoft. I'll use this section to explore Azure support for Kotlin/Android development. Feedback always welcome! I'm maintaining this page in the style of an FAQ. Expand each section for details. Welcome to the Azure section of the Cloud integrations trail.","title":"Hello Azure!"},{"location":"parking-lot/cloud/azure/#azure-overview","text":"Introduction: What is Azure? Azure is Microsoft's cloud computing and AI platform. It has 200+ products or services spanning 22 categories - including AI+Machine Learning , Compute , Databases , Mobile , Security , Web , Storage and more. A category contains multiple products, and a product can belong to multiple categories. Website | Architecture & Solutions Docs | Services & Categories I've identified a subset of services that are likely to be of initial interest to a mobile or web Kotlin developer - and will explore concepts and usage in more detail in th subsections identified in the navigation menu (to left) Architectures: How do we architect mobile-relevant solutions on Azure A well-architected Azure solution has five pillars: cost optimization, operational excellence, performance efficiency, reliability, and security . This Learning Path teaches you how to build such a solution with Azure. From a technology area standpoint, architectures are about the components (integrations) and data workflows (interactions) required to implement common app scenarios or workloads on Azure. The Azure Architecture Center has a rich collection of best practices and patterns for building diverse applications - for different technology areas (or categories) - on Azure. The [Build great solutions with the Microsoft Azure well-architected framework] learning path gives a comprehensive overview of the five pillars of a well-architected Azure solution: For example: Docs | Azure Solutions Docs | Azure Solutions: Mobile Solution | Build a Task-Based Consumer Mobile App Solution | Build a Social App for Mobile/Web, with Authentication _Check out the subset of scenarios defined for the mobile category . Solutions: Where can I use Azure? Solutions describe proven combinations of Azure products and services used to tackle business problems. For example the Task-Based Consumer Mobile App solution describes the architecture, service components and data flows required to: support authentication with multiple social identity providers store (app) data and sync it later - for offline access send push notifications - for real-time alerts SDKs: What are my programming options for Azure? Azure supports a number of Languages and Tools out of the box including Java , JavaScript , .NET , Python and Go -- but not yet for Kotlin. View the latest SDK releases to see the status of product-specific support in that language. As a Kotlin developer, it's worth looking at two different releases: Azure SDK for Java - comprehensive coverage, can be used with Android API 26+ or desugared to API 21 Azure SDK for Android - limited coverage and also in Java, but tailored for Android workflows (API 21+). Given that the SDKs use Java, it's worth reviewing the Kotlin For Android Java developers guidance or taking a related course to figure out how to use existing Java code from your Kotlin app, or migrate the existing Java samples to Kotlin for consistency.","title":"Azure Overview"},{"location":"parking-lot/cloud/azure/#azure-services","text":"I use the terms Services and Products interchangeably in this context.","title":"Azure Services"},{"location":"parking-lot/cloud/azure/#azure-quickstart","text":"","title":"Azure Quickstart"},{"location":"parking-lot/cloud/azure/#learning-resources","text":"MSDocs: 8 Sites To Bookmark Azure Documentation Azure Architecture Center | Solutions Getting Started with Azure Mobile Developers Hub | Solutions Microsoft Learn | Certifications MSLearn: 15 Learning Paths To Complete Complete this curated collection of 15 learning paths (~27 hours). It provides a comprehensive review of Azure fundamentals, data concepts and machine learning usage - also perfect prep for the AZ-900 Certification exam. Azure Fundamentals | modules | modules | modules | modules | modules | modules Azure Data Fundamentals | modules | modules | modules | modules Azure AI/ML Fundamentals | modules | modules | modules | modules | modules","title":"Learning Resources"},{"location":"parking-lot/foldables/","text":"Hello, Foldables! \u00b6 Overview \u00b6 What are Foldables? The term \"Foldables\" refers here to smartphones that fold, giving rise to mobile devices that effectively have two operating modes based on their state (\"folded\" and \"unfolded\") -- leading to developer challenges in adapting the user experience and interactions to suit both the user intent and device features that are available in the current mode. Currently, you can think of devices embracing one of two approaches: * Fold-in | Clamshell - where a large smartphone can be folded (like a flip-phone)) to make it more compact for portability. * Fold-out | Tablet - where a large smartphone can be expanded into a larger display area for immersive experiences or productivity. Why should Kotlin developers care? Currently, most ( if not all ) foldable devices run on Android. And Kotlin is now the preferred language for Android development - so if you are a Kotlin Android developer, it's a good time to explore the ecosystem. Android 10, added more support for building apps for foldables and devices like the Microsoft Surface Duo are embracing dual screen form factors that can enable new solutions for consumers (immersive experiences) and enterprises (productivity apps). Plan \u00b6 To explore app development with Kotlin, I added a 500 Foldables trail with two main branches: Trail Topic Description 501 Foldable Apps For Android Android SDK support for foldables, design patterns for the general category of foldables 502 Dual Screen Apps for Microsoft Surface Duo Surface Duo SDK usage, design patterns for dual-screen category of foldables Learning Resources Progress \u00b6 Check back for updates Trail Map","title":"Hello, Foldables!"},{"location":"parking-lot/foldables/#hello-foldables","text":"","title":"Hello, Foldables!"},{"location":"parking-lot/foldables/#overview","text":"What are Foldables? The term \"Foldables\" refers here to smartphones that fold, giving rise to mobile devices that effectively have two operating modes based on their state (\"folded\" and \"unfolded\") -- leading to developer challenges in adapting the user experience and interactions to suit both the user intent and device features that are available in the current mode. Currently, you can think of devices embracing one of two approaches: * Fold-in | Clamshell - where a large smartphone can be folded (like a flip-phone)) to make it more compact for portability. * Fold-out | Tablet - where a large smartphone can be expanded into a larger display area for immersive experiences or productivity. Why should Kotlin developers care? Currently, most ( if not all ) foldable devices run on Android. And Kotlin is now the preferred language for Android development - so if you are a Kotlin Android developer, it's a good time to explore the ecosystem. Android 10, added more support for building apps for foldables and devices like the Microsoft Surface Duo are embracing dual screen form factors that can enable new solutions for consumers (immersive experiences) and enterprises (productivity apps).","title":"Overview"},{"location":"parking-lot/foldables/#plan","text":"To explore app development with Kotlin, I added a 500 Foldables trail with two main branches: Trail Topic Description 501 Foldable Apps For Android Android SDK support for foldables, design patterns for the general category of foldables 502 Dual Screen Apps for Microsoft Surface Duo Surface Duo SDK usage, design patterns for dual-screen category of foldables Learning Resources","title":"Plan"},{"location":"parking-lot/foldables/#progress","text":"Check back for updates Trail Map","title":"Progress"},{"location":"parking-lot/kotlin/","text":"","title":"Index"}]}