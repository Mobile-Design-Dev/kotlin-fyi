{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Hello Kotlinverse! \u00b6 My name is Nitya Narasimhan . I'm a Mobile / Cloud Advocate on the Developer Relations team at Microsoft and I want to help everyone build beautiful experiences for mobile users at cloud scale. Learn more about me and this project here . This site is for anyone taking a Kotlin learning journey, with three trails initially: Core Kotlin | focus on language syntax and foundational concepts. Kotlin + Android | building professional mobile apps using best practices. Kotlin + Cloud | scaling mobile apps with cloud services for scale. #100DaysOfKotlin - Basics to Multiplatform Have Comments or Feedback? Here are the main options: Comments | Share them on our Discussions board. Errors? | File an Issue and I will look into it! Kudos! | Please do tag @kotlinfyi and let us know what you liked! Under The Hood: MkDocs-Material The site was intentionally built with Mkdocs and the Material theme to mimic documentation guides. I hope it serves as a living Kotlin Study Guide linking to both canonical and community-created resources of value.","title":"Welcome"},{"location":"#hello-kotlinverse","text":"My name is Nitya Narasimhan . I'm a Mobile / Cloud Advocate on the Developer Relations team at Microsoft and I want to help everyone build beautiful experiences for mobile users at cloud scale. Learn more about me and this project here . This site is for anyone taking a Kotlin learning journey, with three trails initially: Core Kotlin | focus on language syntax and foundational concepts. Kotlin + Android | building professional mobile apps using best practices. Kotlin + Cloud | scaling mobile apps with cloud services for scale. #100DaysOfKotlin - Basics to Multiplatform Have Comments or Feedback? Here are the main options: Comments | Share them on our Discussions board. Errors? | File an Issue and I will look into it! Kudos! | Please do tag @kotlinfyi and let us know what you liked! Under The Hood: MkDocs-Material The site was intentionally built with Mkdocs and the Material theme to mimic documentation guides. I hope it serves as a living Kotlin Study Guide linking to both canonical and community-created resources of value.","title":"Hello Kotlinverse!"},{"location":"about/","text":"Under The Hood: MkDocs-Material The site built with Mkdocs and the Material theme and intentionally designed to mimic documentation guides. I hope it serves as a living Kotlin Study Guide linking to both canonical and community-created resources of value. Have Comments or Feedback? Here are the main options: Comments | Share them on our Discussions board. Errors? | File an Issue and I will look into it! Kudos! | Please do tag @kotlinfyi and let us know what you liked! About Me \u00b6 Hello! I'm Nitya. I'm a PhD and Polyglot interested in mobile, web and distributed systems. My PhD explored survivability for distributed Java systems. I then spent the next decade working on mobile and ubiquitous computing research at Motorola, working on diverse next-generation mobile devices and development platforms. As an independent mobile and web developer, I explored both native (Android/Java) and cross-platform (Flutter/Dart, ReactNative/JS) technologies and tools. I joined Microsoft Developer Relations in 2018 to focus on building developer programs as the North America lead, and took a break from active mobile development. But when Microsoft released the Surface Duo in 2020 , I knew it was time to get back to mobile dev!! About KotlinFYI \u00b6 The Android developer ecosystem had evolved greatly in those 2 years. In 2019, Android went Kotlin first , a shift from the earlier \"Java-first\" approach. In 2020, JetBrains released Kotlin 1.4 , unveiling plans and early previews that extend Kotlin's reach to multiplatform solutions including mobile, server-side, native, web and data science. It was time to skill up on Kotlin. But learning a new language requires resources and a preliminary roadmap to guide your learning journey. This is where I hope this site comes in. To help me organize and share my learning journey in a way that might help others following suit. Join me! Follow @kotlinfyi #100DaysOfKotlin \u00b6 This is inspired by the 100DaysOfCode challenge where you commit to working on a coding initiative every day for 100 days, leading to ingrained and consistent habits that improve your comprehension, retention and recall. I kickstarted this in Dec 2020 and hope to make more progress over the holidays to establish a good routine for progress. Keep an eye on these three resources: Roadmap a guide to topics or resources I want to explore. Posts a journal, recording progress as it happens. @kotlinfyi a social account, to share resources & amplify community. #100DaysOfKotlin - Basics to Multiplatform #CloudSkills \u00b6 Every mobile or web front end needs a backend to help analyze, scale and support the user experience across devices and regions. This is where cloud platforms and services can help. If you're new to cloud and AI development, definitely check out my #CloudSkills journey in 2021. #CloudSkills - Concepts to Certification","title":"Welcome"},{"location":"about/#about-me","text":"Hello! I'm Nitya. I'm a PhD and Polyglot interested in mobile, web and distributed systems. My PhD explored survivability for distributed Java systems. I then spent the next decade working on mobile and ubiquitous computing research at Motorola, working on diverse next-generation mobile devices and development platforms. As an independent mobile and web developer, I explored both native (Android/Java) and cross-platform (Flutter/Dart, ReactNative/JS) technologies and tools. I joined Microsoft Developer Relations in 2018 to focus on building developer programs as the North America lead, and took a break from active mobile development. But when Microsoft released the Surface Duo in 2020 , I knew it was time to get back to mobile dev!!","title":"About Me"},{"location":"about/#about-kotlinfyi","text":"The Android developer ecosystem had evolved greatly in those 2 years. In 2019, Android went Kotlin first , a shift from the earlier \"Java-first\" approach. In 2020, JetBrains released Kotlin 1.4 , unveiling plans and early previews that extend Kotlin's reach to multiplatform solutions including mobile, server-side, native, web and data science. It was time to skill up on Kotlin. But learning a new language requires resources and a preliminary roadmap to guide your learning journey. This is where I hope this site comes in. To help me organize and share my learning journey in a way that might help others following suit. Join me! Follow @kotlinfyi","title":"About KotlinFYI"},{"location":"about/#100daysofkotlin","text":"This is inspired by the 100DaysOfCode challenge where you commit to working on a coding initiative every day for 100 days, leading to ingrained and consistent habits that improve your comprehension, retention and recall. I kickstarted this in Dec 2020 and hope to make more progress over the holidays to establish a good routine for progress. Keep an eye on these three resources: Roadmap a guide to topics or resources I want to explore. Posts a journal, recording progress as it happens. @kotlinfyi a social account, to share resources & amplify community. #100DaysOfKotlin - Basics to Multiplatform","title":"#100DaysOfKotlin"},{"location":"about/#cloudskills","text":"Every mobile or web front end needs a backend to help analyze, scale and support the user experience across devices and regions. This is where cloud platforms and services can help. If you're new to cloud and AI development, definitely check out my #CloudSkills journey in 2021. #CloudSkills - Concepts to Certification","title":"#CloudSkills"},{"location":"glossary/","text":"Glossary \u00b6 This page defines abbreviations, brand names, and frequently used terms encountered by Kotlin developers. Sections will be added alphabetically to collect terms beginning with that letter. Abbreviations Hover over the abbreviation to see it's expanded definition - this can be done anywhere on this site. KMM","title":"Welcome"},{"location":"glossary/#glossary","text":"This page defines abbreviations, brand names, and frequently used terms encountered by Kotlin developers. Sections will be added alphabetically to collect terms beginning with that letter. Abbreviations Hover over the abbreviation to see it's expanded definition - this can be done anywhere on this site. KMM","title":"Glossary"},{"location":"100days/","text":"My #100DaysOfKotlin Challenge \u00b6 This is inspired by the 100DaysOfCode challenge where you commit to working on a coding initiative every day for 100 days, leading to ingrained and consistent habits that improve your comprehension, retention and recall. I kickstarted this in Dec 2020 and hope to make more progress over the holidays to establish a good routine for progress. Keep an eye on these three resources: Roadmap a guide to topics or resources I want to explore. Posts a journal, recording progress as it happens. @kotlinfyi a social account, to share resources & amplify community. #100DaysOfKotlin - Basics to Multiplatform","title":"About"},{"location":"100days/#my-100daysofkotlin-challenge","text":"This is inspired by the 100DaysOfCode challenge where you commit to working on a coding initiative every day for 100 days, leading to ingrained and consistent habits that improve your comprehension, retention and recall. I kickstarted this in Dec 2020 and hope to make more progress over the holidays to establish a good routine for progress. Keep an eye on these three resources: Roadmap a guide to topics or resources I want to explore. Posts a journal, recording progress as it happens. @kotlinfyi a social account, to share resources & amplify community. #100DaysOfKotlin - Basics to Multiplatform","title":"My #100DaysOfKotlin Challenge"},{"location":"100days/about/","text":"This is inspired by the 100DaysOfCode challenge where you commit to working on a coding initiative every day for 100 days, leading to ingrained and consistent habits that improve your comprehension, retention and recall. I kickstarted this in Dec 2020 and hope to make more progress over the holidays to establish a good routine for progress. Keep an eye on these three resources: Roadmap a guide to topics or resources I want to explore. Posts a journal, recording progress as it happens. @kotlinfyi a social account, to share resources & amplify community. #100DaysOfKotlin - Basics to Multiplatform","title":"About"},{"location":"100days/journal/","text":"Timelines and Rabbit Holes \u00b6 The roadmap is about what I want to cover over the 100 days. This timeline page tells you how I went about covering it. Hint: I am not always sequential in my journeys - but learning never is. Sometimes taking those detours and jumping into rabbit holes is part of the fun of discovery! #100DaysOfKotlin - Day 1 Setup, explore Kotlin development environments Build first Kotlin \"app\" to validate setups Explore Kotlin \"koans\" with integrated IDEA course #100DaysOfKotlin - Day 2","title":"Timeline"},{"location":"100days/journal/#timelines-and-rabbit-holes","text":"The roadmap is about what I want to cover over the 100 days. This timeline page tells you how I went about covering it. Hint: I am not always sequential in my journeys - but learning never is. Sometimes taking those detours and jumping into rabbit holes is part of the fun of discovery! #100DaysOfKotlin - Day 1 Setup, explore Kotlin development environments Build first Kotlin \"app\" to validate setups Explore Kotlin \"koans\" with integrated IDEA course #100DaysOfKotlin - Day 2","title":"Timelines and Rabbit Holes"},{"location":"100days/roadmap/","text":"Let's Go Adventuring! \u00b6 The current sitemap is structured to provide hierarchical navigation (Levels 100-400) with a basic roadmap laid out in terms of topics that can be covered with the canonical resources identified. Grayed-out sections provide broad roadmap focus but will get elevated to a numbered section with details as I progress through #100Days. Canonical Resources identify popular content authored by reputable sources, including the language and platform maintainers. Join my #100DaysOfKotlin learning adventure! 100: Kotlin Core \u00b6 Jumpstart Kotlin development as a code newbie: Canonical Resources SOURCE: KOTLINLANG / JETBRAINS Kotlin Docs Kotlin Education Kotlin Playground 101 | Getting Started (Setup) Setup, explore Kotlin development environments Build first Kotlin \"app\" to validate setups Explore Kotlin \"koans\" with integrated IDEA course 102 | Kotlin Basics 103 | Kotlin Classes & Objects 103 | Kotlin Functions & Lambdas 103 | Kotlin Collections 103 | Kotlin Coroutines 200: Kotlin + Android \u00b6 Embrace the Kotlin First approach as an Android newbie. Canonical Resources SOURCE: ANDROID DEVELOPERS Develop Android Apps With Kotlin Kotlin Style Guide Kotlin First Basic Guides | Advanced Guides | For Android Java Developers Android Training: Courses Android Platform: Architecture Android Jetpack: Libraries Building Apps for Foldables SOURCE: MICROSOFT About Surface Duo Android Apps For Dual-Screen Devices 201 | Getting Started (Setup) 202 | Android Kotlin Fundamentals 203 | Advanced Android In Kotlin 204 | Android Jetpack 204 | Foldable Devices 300: Kotlin + Azure \u00b6 Cloud+AI integration options for the Kotlin developer. Canonical Resources SOURCE: MICROSOFT Azure Documentation Azure Learning Paths Azure Certifications Azure Architectures Azure For Mobile Developers 300 | Azure Fundamentals 301 | Azure App Center 301 | Azure App Service 400: Kotlin For \"X\" \u00b6 Migrating to Kotlin with prior development or domain expertise: 401 | Kotlin For Java Devs 402 | Kotlin For JavaScript Devs 403 | Kotlin For Data Scientists 500: Courses & Certifications \u00b6 501 | Kotlin For Java Developers - Coursera/JetBrains 502 | Android Kotlin Developer Nanodegree - Udacity/Google 503 | Associate Android Developer - Google Developers 504 | Azure Fundamentals Certification - Microsoft","title":"Roadmap"},{"location":"100days/roadmap/#lets-go-adventuring","text":"The current sitemap is structured to provide hierarchical navigation (Levels 100-400) with a basic roadmap laid out in terms of topics that can be covered with the canonical resources identified. Grayed-out sections provide broad roadmap focus but will get elevated to a numbered section with details as I progress through #100Days. Canonical Resources identify popular content authored by reputable sources, including the language and platform maintainers. Join my #100DaysOfKotlin learning adventure!","title":" Let's Go Adventuring!"},{"location":"100days/roadmap/#100-kotlin-core","text":"Jumpstart Kotlin development as a code newbie: Canonical Resources SOURCE: KOTLINLANG / JETBRAINS Kotlin Docs Kotlin Education Kotlin Playground 101 | Getting Started (Setup) Setup, explore Kotlin development environments Build first Kotlin \"app\" to validate setups Explore Kotlin \"koans\" with integrated IDEA course 102 | Kotlin Basics 103 | Kotlin Classes & Objects 103 | Kotlin Functions & Lambdas 103 | Kotlin Collections 103 | Kotlin Coroutines","title":"100: Kotlin Core"},{"location":"100days/roadmap/#200-kotlin-android","text":"Embrace the Kotlin First approach as an Android newbie. Canonical Resources SOURCE: ANDROID DEVELOPERS Develop Android Apps With Kotlin Kotlin Style Guide Kotlin First Basic Guides | Advanced Guides | For Android Java Developers Android Training: Courses Android Platform: Architecture Android Jetpack: Libraries Building Apps for Foldables SOURCE: MICROSOFT About Surface Duo Android Apps For Dual-Screen Devices 201 | Getting Started (Setup) 202 | Android Kotlin Fundamentals 203 | Advanced Android In Kotlin 204 | Android Jetpack 204 | Foldable Devices","title":"200: Kotlin + Android"},{"location":"100days/roadmap/#300-kotlin-azure","text":"Cloud+AI integration options for the Kotlin developer. Canonical Resources SOURCE: MICROSOFT Azure Documentation Azure Learning Paths Azure Certifications Azure Architectures Azure For Mobile Developers 300 | Azure Fundamentals 301 | Azure App Center 301 | Azure App Service","title":"300: Kotlin + Azure"},{"location":"100days/roadmap/#400-kotlin-for-x","text":"Migrating to Kotlin with prior development or domain expertise: 401 | Kotlin For Java Devs 402 | Kotlin For JavaScript Devs 403 | Kotlin For Data Scientists","title":"400: Kotlin For \"X\""},{"location":"100days/roadmap/#500-courses-certifications","text":"501 | Kotlin For Java Developers - Coursera/JetBrains 502 | Android Kotlin Developer Nanodegree - Udacity/Google 503 | Associate Android Developer - Google Developers 504 | Azure Fundamentals Certification - Microsoft","title":"500: Courses &amp; Certifications"},{"location":"includes/abbrev/","text":"","title":"Abbrev"},{"location":"posts/kotlin-001-setup/","text":"Setup: Your Development Environments \u00b6 Helpful Resources About IntelliJ IDEA Setup: IntelliJ IDEA Setup: Command Line Compiler Setup: Eclipse Setup: Learners Guides About: Android Studio IDE StackOverflow: Android Studio vs. IntelliJ JetBrains Toolbox App EduTools Plugin Getting Started With Kotlin Manage multiple IDEs & Releases with Toolbox App VSCode: Kotlin Language Plugin VSCode: Code Runner plugin VSCode: Setup for Kotlin Development 1. Introduction \u00b6 What are my development environment options? Kotlin offers multiple options for development environments: IntelliJ IDEA - preferred JetBrains IDE Command Line Compiler - pairs well with a text editor Eclipse - likely familiar to Java devs Which one should I use? After some research, I recommend the following: Install the JetBrains Toolbox App to manage multiple IDE versions (stable, canary releases) or variations. This was a popular developer suggestion on StackOverflow especially when you start moving to Android Studio for native development. Use IntelliJ when you first get started. It's maintained & recommended by JetBrains (\"go where the devs are\") and has built-in Learners Guides that help you skill up fast. This was also the basis for the Android Studio IDE , so it makes the transition there easier. Setup the Command Line Compiler if you can. If you love text editors or environments like VS Code, this is a fast and lightweight way to write/test basic code. The syntax will be familiar to Java devs, and you can apparently run scripts though I haven't tried it. 2. IntelliJ IDEA : Setup \u00b6 Use JetBrains Toolbox Approach I'd previously installed Android Studio and IntelliJ IDEA manually. Now, I simply uninstalled those versions and reinstalled them via Toolbox App . The ability to manage multiple IDEs and releases from one dashboard, is priceless! Use the Toolbox App to install IDEA and Android Studio IDEs Install the EduTools Plugin The EduTools Plugin allows us to explore learning guides (e.g., Kotlin Koans ) directly from the IDE - which also has the benefit of giving you more familiarity with IDE features and tooling, as you practice. Don't forget to restart the IDE after installing the plugin! 2. Kotlin CLI: Setup \u00b6 Install the Command Line Compiler You have two options: 1. Reuse from IDEA: If you had previously installed IntelliJ IDEA , the compiler is already installed in your development environment. You just need to update your PATH to make it accessible from external terminals. Read more in this StackOverflow response . Note: If you installed the IDE using the Toolbox App, the location is different. Look for: /Users/<username>/Library/Application Support/JetBrains/Toolbox/apps/IDEA-C/ch-0/203.5981.155/IntelliJ IDEA CE.app/Contents/plugins/Kotlin/kotlinc/bin where <username> is your Mac login. 2. Install from scratch: Follow this tutorial . On Mac, I used the Homebrew install since it makes it easier to manage updates later with brew upgrade kotlin . This also takes care of installing the openjdk dependency by default - if you want to use that JDK installation as your default, the install process also provides a PATH update recommendation. Configure Visual Studio Code to use the CLI You can also now use it with a text editor or IDE - including my favorite: VS Code. VS Code has community-built extensions to support Kotlin CLI usage - but you won't get the rich tooling of IntelliJ IDEA . Instead, you get a lightweight way to do quick code fixes, command-line builds and deploys, while staying within your familiar IDE . I followed the approach recommended here to setup my VS Code: Install the Kotlin Language Plugin Install the Code Runner plugin Verify you have java and kotlin binaries accessible at command line. Now, open your Kotlin text file (e.g., test.kt ) in VS Code. The Kotlin Language extension activates syntax highlighting and code snippets. You now have two options to build and run your code: Open the VS Code terminal and use kotlinc directly. Use shortcut Ctrl+Alt+N or F1 => Run Code to activate CodeRunner to do this for you. Validate CLI usage with a simple program Revisit the CLI tutorial and run your first program. Check out my \"First App\" post for more details.","title":"1. Setup IDE"},{"location":"posts/kotlin-001-setup/#setup-your-development-environments","text":"Helpful Resources About IntelliJ IDEA Setup: IntelliJ IDEA Setup: Command Line Compiler Setup: Eclipse Setup: Learners Guides About: Android Studio IDE StackOverflow: Android Studio vs. IntelliJ JetBrains Toolbox App EduTools Plugin Getting Started With Kotlin Manage multiple IDEs & Releases with Toolbox App VSCode: Kotlin Language Plugin VSCode: Code Runner plugin VSCode: Setup for Kotlin Development","title":"Setup: Your Development Environments"},{"location":"posts/kotlin-001-setup/#1-introduction","text":"What are my development environment options? Kotlin offers multiple options for development environments: IntelliJ IDEA - preferred JetBrains IDE Command Line Compiler - pairs well with a text editor Eclipse - likely familiar to Java devs Which one should I use? After some research, I recommend the following: Install the JetBrains Toolbox App to manage multiple IDE versions (stable, canary releases) or variations. This was a popular developer suggestion on StackOverflow especially when you start moving to Android Studio for native development. Use IntelliJ when you first get started. It's maintained & recommended by JetBrains (\"go where the devs are\") and has built-in Learners Guides that help you skill up fast. This was also the basis for the Android Studio IDE , so it makes the transition there easier. Setup the Command Line Compiler if you can. If you love text editors or environments like VS Code, this is a fast and lightweight way to write/test basic code. The syntax will be familiar to Java devs, and you can apparently run scripts though I haven't tried it.","title":"1. Introduction"},{"location":"posts/kotlin-001-setup/#2-intellij-idea-setup","text":"Use JetBrains Toolbox Approach I'd previously installed Android Studio and IntelliJ IDEA manually. Now, I simply uninstalled those versions and reinstalled them via Toolbox App . The ability to manage multiple IDEs and releases from one dashboard, is priceless! Use the Toolbox App to install IDEA and Android Studio IDEs Install the EduTools Plugin The EduTools Plugin allows us to explore learning guides (e.g., Kotlin Koans ) directly from the IDE - which also has the benefit of giving you more familiarity with IDE features and tooling, as you practice. Don't forget to restart the IDE after installing the plugin!","title":"2. IntelliJ IDEA: Setup"},{"location":"posts/kotlin-001-setup/#2-kotlin-cli-setup","text":"Install the Command Line Compiler You have two options: 1. Reuse from IDEA: If you had previously installed IntelliJ IDEA , the compiler is already installed in your development environment. You just need to update your PATH to make it accessible from external terminals. Read more in this StackOverflow response . Note: If you installed the IDE using the Toolbox App, the location is different. Look for: /Users/<username>/Library/Application Support/JetBrains/Toolbox/apps/IDEA-C/ch-0/203.5981.155/IntelliJ IDEA CE.app/Contents/plugins/Kotlin/kotlinc/bin where <username> is your Mac login. 2. Install from scratch: Follow this tutorial . On Mac, I used the Homebrew install since it makes it easier to manage updates later with brew upgrade kotlin . This also takes care of installing the openjdk dependency by default - if you want to use that JDK installation as your default, the install process also provides a PATH update recommendation. Configure Visual Studio Code to use the CLI You can also now use it with a text editor or IDE - including my favorite: VS Code. VS Code has community-built extensions to support Kotlin CLI usage - but you won't get the rich tooling of IntelliJ IDEA . Instead, you get a lightweight way to do quick code fixes, command-line builds and deploys, while staying within your familiar IDE . I followed the approach recommended here to setup my VS Code: Install the Kotlin Language Plugin Install the Code Runner plugin Verify you have java and kotlin binaries accessible at command line. Now, open your Kotlin text file (e.g., test.kt ) in VS Code. The Kotlin Language extension activates syntax highlighting and code snippets. You now have two options to build and run your code: Open the VS Code terminal and use kotlinc directly. Use shortcut Ctrl+Alt+N or F1 => Run Code to activate CodeRunner to do this for you. Validate CLI usage with a simple program Revisit the CLI tutorial and run your first program. Check out my \"First App\" post for more details.","title":"2. Kotlin CLI: Setup"},{"location":"posts/kotlin-002-firstapp/","text":"The First Kotlin App \u00b6 Helpful Resources Setup: Command Line Compiler Getting Started With Kotlin IntelliJ IDEA : Create a new project IntelliJ IDEA : Import a project I am assuming you already have the relevant Kotlin development environments ( IDE and CLI) setup. If not, my Setup: Your Development Environments post is worth scanning first. All set? Let's go! Using: Kotlin CLI \u00b6 CLI Tutorial Walkthrough I followed the CLI tutorial with a minor adaptation in message. You can find the code on GitHub 1 2 3 4 // Filename: code/100days/001-hello.kt fun main () { println ( \"Hello, Kotlinverse!!\" ) } Now open your terminal of choice, change to the code directory, and let's go exploring! First we need to compile the source code using kotlinc , the command-line Kotlin compiler. 1 2 3 4 $ cd code / 100 days $ kotlinc ./ 001 - hello . kt - d hello . jar $ ls 001 - hello . kt hello . jar This generates the classic JAR file familiar to Java developers. You can use the jar command to peek into the generated archive and identify generated classes. 1 2 3 4 $ jar -tvf hello.jar META-INF/MANIFEST.MF _001_helloKt.class META-INF/main.kotlin_module Now run the code using the kotlin command with the class name identified above. 1 2 $kotlin -classpath hello.jar _001_helloKt Hello, Kotlinverse!! Or, if you are familiar with Java - this is a standard jar file with a defined entry point, so you can also just do this: 1 2 $java -jar hello.jar Hello, Kotlinverse!! Under The Hood: hello.jar If you're curious about what's in a jar file, you can unpack it using: 1 2 3 4 $jar xvf hello.jar inflated: META-INF/MANIFEST.MF inflated: _001_helloKt.class inflated: META-INF/main.kotlin_module The MANIFEST.MF file gives you all the information you need, to figure out what the entry point or Main-Class for this archive is. This is what mine looks like - and clearly identifies _001_helloKt as the entry point. 1 2 3 4 $ cat META-INF/MANIFEST.MF Manifest-Version: 1.0 Created-By: JetBrains Kotlin Main-Class: _001_helloKt Using: VS Code + CLI \u00b6 Option 1: Use VSCode + CodeRunner Type F1 to get the commands selector, then select Run Code to activate the extension. It should open up a built-in terminal and produce output like this: 1 2 3 4 5 [Running] cd \"/Users/nitya/Documents/GitHub/kotlin-fyi/code/100days/\" && kotlinc 001 - hello . kt - include - runtime - d 001 - hello . jar && java - jar 001 - hello . jar Hello , Kotlinverse !! [Done] exited with code = 0 in 3.145 seconds Option 2: Use VSCode Terminal manually If you're a Java developer, the syntax and approach will be very familiar. In fact, if you look at the output of the code runner above, you can spot the commands it uses, to execute the built/run sequence! Or refer to the Using CLI section for the standard terminal commands. To open the built-in Terminal in VS Code, you can use the \"Cmd + `\" shortcut on the Mac. There might be other shortcuts available for different environments. Using: IntelliJ IDEA \u00b6 Next, let's explore the richer tooling of IntelliJ IDEA to create a new application (from scratch), and also to work with existing code like the sample above. How can we create a new project? I started with the Getting Started with IntelliJ IDEA tutorial, building a HelloKotlinverse application using the Console Application template and default configurations. You can also read the IntelliJ Guide for more options and details. By default, your project uses the Gradle build system with Kotlin DSL . If you open the default boilerplate project, you will see this distribution: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 .gradle/ .idea/ build.gradle.kts gradle/ wrapper/ gradle-wrapper.jar gradle-wrapper.properties gradle.properties gradlew gradlew.bat settings.gradle.kts src/ main/ kotlin/ main.kt resources/ test/ kotlin/ main.kt resources/ The main file to look at right now is the src/main/kotlin/main.kt file which contains this code: 1 2 3 fun main(args: Array<String>) { println(\"Hello World!\") } Yes - the exact code sample we used for exploring CLI usage is the default \"Hello World\" boilerplate code - except it declares the main function's accepted args parameter explicitly. Change the code to send a different message - I went with Hello Kotlinverse! for mine - then click the Run (green arrow) in the gutter of your editor screen to run the code. You should see something like this (some output eliminated for clarity) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 1:11:52 PM: Executing task 'MainKt.main()'... Starting Gradle Daemon... Gradle Daemon started in 815 ms > Task :wrapper BUILD SUCCESSFUL in 4s 1 actionable task: 1 executed > Task :compileKotlin .. .. Hello Kotlinverse! BUILD SUCCESSFUL in 6s 2 actionable tasks: 2 executed 1:12:04 PM: Task execution finished 'MainKt.main()'. And that's it! You've validated your IDE install and compiled your first app. In later sections we'll explore the purpose and usage of the various other files and settings in this IDE . How can we import and work with existing projects? The short answer is _\"it depends!\". You can import an existing IDEA project (e.g., move project to new environment), or create it from the source in a version control system, or create it from source files in your local directory. Read this guide for more on all these options. Summary \u00b6 What we completed here: verified our development environment is setup correctly wrote the basic \"Hello, World\" equivalent in Kotlin compiled and ran it from command-line (CLI) setup and used the CLI from a different editor (VS Code) imported and ran the code in the IntelliJ IDEA IDE learned to build and run a new app using IntelliJ IDEA The \"Referenced Resources\" section at the top of the page lists all the resources used in this segment.","title":"2. First Kotlin App"},{"location":"posts/kotlin-002-firstapp/#the-first-kotlin-app","text":"Helpful Resources Setup: Command Line Compiler Getting Started With Kotlin IntelliJ IDEA : Create a new project IntelliJ IDEA : Import a project I am assuming you already have the relevant Kotlin development environments ( IDE and CLI) setup. If not, my Setup: Your Development Environments post is worth scanning first. All set? Let's go!","title":"The First Kotlin App"},{"location":"posts/kotlin-002-firstapp/#using-kotlin-cli","text":"CLI Tutorial Walkthrough I followed the CLI tutorial with a minor adaptation in message. You can find the code on GitHub 1 2 3 4 // Filename: code/100days/001-hello.kt fun main () { println ( \"Hello, Kotlinverse!!\" ) } Now open your terminal of choice, change to the code directory, and let's go exploring! First we need to compile the source code using kotlinc , the command-line Kotlin compiler. 1 2 3 4 $ cd code / 100 days $ kotlinc ./ 001 - hello . kt - d hello . jar $ ls 001 - hello . kt hello . jar This generates the classic JAR file familiar to Java developers. You can use the jar command to peek into the generated archive and identify generated classes. 1 2 3 4 $ jar -tvf hello.jar META-INF/MANIFEST.MF _001_helloKt.class META-INF/main.kotlin_module Now run the code using the kotlin command with the class name identified above. 1 2 $kotlin -classpath hello.jar _001_helloKt Hello, Kotlinverse!! Or, if you are familiar with Java - this is a standard jar file with a defined entry point, so you can also just do this: 1 2 $java -jar hello.jar Hello, Kotlinverse!! Under The Hood: hello.jar If you're curious about what's in a jar file, you can unpack it using: 1 2 3 4 $jar xvf hello.jar inflated: META-INF/MANIFEST.MF inflated: _001_helloKt.class inflated: META-INF/main.kotlin_module The MANIFEST.MF file gives you all the information you need, to figure out what the entry point or Main-Class for this archive is. This is what mine looks like - and clearly identifies _001_helloKt as the entry point. 1 2 3 4 $ cat META-INF/MANIFEST.MF Manifest-Version: 1.0 Created-By: JetBrains Kotlin Main-Class: _001_helloKt","title":"Using: Kotlin CLI"},{"location":"posts/kotlin-002-firstapp/#using-vs-code-cli","text":"Option 1: Use VSCode + CodeRunner Type F1 to get the commands selector, then select Run Code to activate the extension. It should open up a built-in terminal and produce output like this: 1 2 3 4 5 [Running] cd \"/Users/nitya/Documents/GitHub/kotlin-fyi/code/100days/\" && kotlinc 001 - hello . kt - include - runtime - d 001 - hello . jar && java - jar 001 - hello . jar Hello , Kotlinverse !! [Done] exited with code = 0 in 3.145 seconds Option 2: Use VSCode Terminal manually If you're a Java developer, the syntax and approach will be very familiar. In fact, if you look at the output of the code runner above, you can spot the commands it uses, to execute the built/run sequence! Or refer to the Using CLI section for the standard terminal commands. To open the built-in Terminal in VS Code, you can use the \"Cmd + `\" shortcut on the Mac. There might be other shortcuts available for different environments.","title":"Using: VS Code + CLI"},{"location":"posts/kotlin-002-firstapp/#using-intellij-idea","text":"Next, let's explore the richer tooling of IntelliJ IDEA to create a new application (from scratch), and also to work with existing code like the sample above. How can we create a new project? I started with the Getting Started with IntelliJ IDEA tutorial, building a HelloKotlinverse application using the Console Application template and default configurations. You can also read the IntelliJ Guide for more options and details. By default, your project uses the Gradle build system with Kotlin DSL . If you open the default boilerplate project, you will see this distribution: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 .gradle/ .idea/ build.gradle.kts gradle/ wrapper/ gradle-wrapper.jar gradle-wrapper.properties gradle.properties gradlew gradlew.bat settings.gradle.kts src/ main/ kotlin/ main.kt resources/ test/ kotlin/ main.kt resources/ The main file to look at right now is the src/main/kotlin/main.kt file which contains this code: 1 2 3 fun main(args: Array<String>) { println(\"Hello World!\") } Yes - the exact code sample we used for exploring CLI usage is the default \"Hello World\" boilerplate code - except it declares the main function's accepted args parameter explicitly. Change the code to send a different message - I went with Hello Kotlinverse! for mine - then click the Run (green arrow) in the gutter of your editor screen to run the code. You should see something like this (some output eliminated for clarity) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 1:11:52 PM: Executing task 'MainKt.main()'... Starting Gradle Daemon... Gradle Daemon started in 815 ms > Task :wrapper BUILD SUCCESSFUL in 4s 1 actionable task: 1 executed > Task :compileKotlin .. .. Hello Kotlinverse! BUILD SUCCESSFUL in 6s 2 actionable tasks: 2 executed 1:12:04 PM: Task execution finished 'MainKt.main()'. And that's it! You've validated your IDE install and compiled your first app. In later sections we'll explore the purpose and usage of the various other files and settings in this IDE . How can we import and work with existing projects? The short answer is _\"it depends!\". You can import an existing IDEA project (e.g., move project to new environment), or create it from the source in a version control system, or create it from source files in your local directory. Read this guide for more on all these options.","title":"Using: IntelliJ IDEA"},{"location":"posts/kotlin-002-firstapp/#summary","text":"What we completed here: verified our development environment is setup correctly wrote the basic \"Hello, World\" equivalent in Kotlin compiled and ran it from command-line (CLI) setup and used the CLI from a different editor (VS Code) imported and ran the code in the IntelliJ IDEA IDE learned to build and run a new app using IntelliJ IDEA The \"Referenced Resources\" section at the top of the page lists all the resources used in this segment.","title":"Summary"},{"location":"posts/kotlin-003-firstkoans/","text":"The First Kotlin Koan \u00b6 Helpful Resources Kotlin Koans Kotlin Koans: Online Learner Guide About Koans \u00b6 Learning programming syntax thoroughly is hard without trawling the docs extensively. Kotlin Koans are handy exercises that teach you syntax in coding contexts , where you fix syntax problems in the koan to make the associated tests pass. You can complete Koans online using the interactive Playground, or use the My Courses tab in IntelliJ IDE to explore this (and other courses) interactively within the IDE . Existing Koans cover everything from basic syntax to collections and generics. Review IntelliJ IDEA : Setup and make sure you have the EduTools plugin installed Set: Introduction \u00b6 Set: Conventions \u00b6 Summary \u00b6 What we completed here:","title":"3. First Kotlin Koan"},{"location":"posts/kotlin-003-firstkoans/#the-first-kotlin-koan","text":"Helpful Resources Kotlin Koans Kotlin Koans: Online Learner Guide","title":"The First Kotlin Koan"},{"location":"posts/kotlin-003-firstkoans/#about-koans","text":"Learning programming syntax thoroughly is hard without trawling the docs extensively. Kotlin Koans are handy exercises that teach you syntax in coding contexts , where you fix syntax problems in the koan to make the associated tests pass. You can complete Koans online using the interactive Playground, or use the My Courses tab in IntelliJ IDE to explore this (and other courses) interactively within the IDE . Existing Koans cover everything from basic syntax to collections and generics. Review IntelliJ IDEA : Setup and make sure you have the EduTools plugin installed","title":"About Koans"},{"location":"posts/kotlin-003-firstkoans/#set-introduction","text":"","title":"Set: Introduction"},{"location":"posts/kotlin-003-firstkoans/#set-conventions","text":"","title":"Set: Conventions"},{"location":"posts/kotlin-003-firstkoans/#summary","text":"What we completed here:","title":"Summary"}]}